class TrieNode {
    // Initialize your data structure here.
    private final int SIZE = 26;
    public int num;
    public TrieNode [] children;
    public boolean isLeaf;
    public char val;
    public TrieNode() {
        this.num = 1;
        this.children = new TrieNode[SIZE];
        this.isLeaf = false;
    }
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        if(word == null || word.length()==0)
            return;
        TrieNode node = root;
        char [] array = word.toCharArray();
        for(int i = 0; i < array.length; i ++){
            int pos = array[i]-'a';
            if(node.children[pos]==null){
                node.children[pos] = new TrieNode();
                node.children[pos].val = array[i];
            }else{
                node.children[pos].num++;
            }
            node = node.children[pos];
        }
        node.isLeaf = true;
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        if(word==null||word.length()==0)
            return false;
        char [] array = word.toCharArray();
        TrieNode node = root;
        for(int i = 0; i < array.length; i ++){
            int pos = array[i]-'a';
            if(node.children[pos] == null)
                return false;
            else
                node = node.children[pos];
        }
        return node.isLeaf;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        if(prefix == null || prefix.length() == 0)
            return false;
        prefix = prefix.toLowerCase();
        char [] array = prefix.toCharArray();
        TrieNode node = root;
        for(int i = 0; i < array.length; i ++){
            int pos = array[i]-'a';
            if(node.children[pos]==null)
                return false;
            else
                node = node.children[pos];
        }
        return true;
    }
}

// Your Trie object will be instantiated and called as such:
// Trie trie = new Trie();
// trie.insert("somestring");
// trie.search("key");