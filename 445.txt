/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null)
            return l2;
        if(l2 == null)
            return l1;
        Stack<ListNode> stack1 = new Stack<>();
        Stack<ListNode> stack2 = new Stack<>();
        ListNode head1 = l1;
        ListNode head2 = l2;
        ListNode dummy = new ListNode(-1);
        ListNode newHead = dummy;
        int carry = 0;
        while(head1!=null){
            stack1.push(head1);
            head1=head1.next;
        }
        while(head2!=null){
            stack2.push(head2);
            head2 = head2.next;
        }
        while(!stack1.isEmpty()||!stack2.isEmpty()||carry!=0){
            ListNode current = new ListNode(carry);
            if(!stack1.isEmpty()){
                current.val += stack1.pop().val;
            }
            if(!stack2.isEmpty()){
                current.val += stack2.pop().val;
            }
            carry = current.val/10;
            current.val = current.val%10;
            dummy.next = current;
            dummy = dummy.next;
        }
        return reverseList(newHead.next);
    }
    
    public ListNode reverseList (ListNode head){
        if(head == null||head.next == null)
            return head;
        ListNode current = head;
        ListNode pre = null;
        while(current!=null){
            ListNode next = current.next;
            current.next = pre;
            pre = current;
            current = next;
        }
        return pre;    
    }
}
///////////
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> s1 = new Stack<Integer>();
        Stack<Integer> s2 = new Stack<Integer>();
        
        while(l1 != null) {
            s1.push(l1.val);
            l1 = l1.next;
        };
        while(l2 != null) {
            s2.push(l2.val);
            l2 = l2.next;
        }
        
        int sum = 0;
        ListNode list = new ListNode(0);
        while (!s1.empty() || !s2.empty()) {
            if (!s1.empty()) sum += s1.pop();
            if (!s2.empty()) sum += s2.pop();
            list.val = sum % 10;
            ListNode head = new ListNode(sum / 10);
            head.next = list;
            list = head;
            sum /= 10;
        }
        
        return list.val == 0 ? list.next : list;
    }
}