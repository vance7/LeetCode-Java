public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if(obstacleGrid == null)
            return 0;
        if(obstacleGrid.length == 0||obstacleGrid[0].length == 0)
            return 1;
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int [][] result = new int [m][n];
        for(int i = 0; i < m; i++){
            if(obstacleGrid[i][0]==1)
                result[i][0] = 0;
            else{
                if(i>0&&result[i-1][0]==0)
                    result[i][0] = 0;
                else
                    result[i][0]=1;
            }
        }
        for(int j = 0; j < n; j++){
            if(obstacleGrid[0][j]==1)
                result[0][j] = 0;
            else{
                if(j>0&&result[0][j-1]==0)
                    result[0][j] = 0;
                else
                    result[0][j] = 1;
            }
        }
        for(int i = 1; i < m; i ++){
        	for(int j = 1; j < n; j ++){
        	    if(obstacleGrid[i][j]==1)
        	        result[i][j]=0;
        	    else
        		    result[i][j] = result[i-1][j]+result[i][j-1];
        	}
        }
        return result[m-1][n-1];
    }
}

////////

public int uniquePathsWithObstacles(int[][] obstacleGrid) {
    int width = obstacleGrid[0].length;
    int[] dp = new int[width];
    dp[0] = 1;
    for (int[] row : obstacleGrid) {
        for (int j = 0; j < width; j++) {
            if (row[j] == 1)
                dp[j] = 0;
            else if (j > 0)
                dp[j] += dp[j - 1];
        }
    }
    return dp[width - 1];
}

