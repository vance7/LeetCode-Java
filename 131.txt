public class Solution {
    private List<List<String>> result;
    private List<String> curr;
    public List<List<String>> partition(String s) {
        result = new ArrayList<>();
        curr = new ArrayList<>();
        backTrack(s,0);
        return result;
    }
    public void backTrack(String s, int l){
        if(l==s.length())
            result.add(new ArrayList(curr));
        for(int i = l; i < s.length(); i ++){
            if(isPalindrome(s,l,i)){
                if(l==i)
                    curr.add(Character.toString(s.charAt(i)));
                else
                    curr.add(s.substring(l,i+1));
                backTrack(s,i+1);
                curr.remove(curr.size()-1);
            }
        }
    }
    public boolean isPalindrome(String s, int l, int h){
        if(l==h)
            return true;
        while(l<h){
            if(s.charAt(l)!=s.charAt(h))
                return false;
            l++;
            h--;
        }
        return true;
    }
}