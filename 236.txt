/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null|| p == null || q == null)
            return null;
        if(root == p || root == q)
            return root;
        if(inTree(root.left,p)){
            if(inTree(root.right, q))
                return root;
            else
                return lowestCommonAncestor(root.left,p,q);
        }
        else{
            if(inTree(root.left,q))
                return root;
            else
                return lowestCommonAncestor(root.right,p,q);
        }
    }
    
    public boolean inTree(TreeNode root, TreeNode n){
        if(root == null || n == null)
            return false;
        if(root == n)
            return true;
        return inTree(root.left,n)||inTree(root.right,n);
    }
}
////////////
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null||root == p || root == q)    return root;
        TreeNode left = lowestCommonAncestor(root.left,p,q);
        TreeNode right = lowestCommonAncestor(root.right,p,q);
        return left==null?right:right==null?left:root;
    }
}
 If the current (sub)tree contains both p and q, then the function result is their LCA. If only one of them is in that subtree, then the result is that one of them. If neither are in that subtree, the result is null/None/nil.