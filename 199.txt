/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new LinkedList<>();
        if(root == null)
            return res;
        Queue<TreeNode> queue = new LinkedList<>();
        int cNums = 1, nNums = 0;
        queue.add(root);
        while(!queue.isEmpty()){
            TreeNode curr = queue.remove();
            cNums--;
            if(curr.left!=null){
                queue.add(curr.left);
                nNums++;
            }
            if(curr.right!=null){
                queue.add(curr.right);
                nNums++;
            }
            if(cNums == 0){
                res.add(curr.val);
                cNums = nNums;
                nNums = 0;
            }
        }
        return res;
    }
}

////////

public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        rightView(root, result, 0);
        return result;
    }
    
    public void rightView(TreeNode curr, List<Integer> result, int currDepth){
        if(curr == null){
            return;
        }
        if(currDepth == result.size()){
            result.add(curr.val);
        }
        
        rightView(curr.right, result, currDepth + 1);
        rightView(curr.left, result, currDepth + 1);
        
    }
}