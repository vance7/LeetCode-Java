public class Solution {
    public int uniquePaths(int m, int n) {
        if(m==0&&n==0)
            return 1;
        if(m==0||n==0)
            return 1;
        int [][] result = new int[m][n];
        for(int i = 0; i < m; i++)
        	result[i][0]=1;
        for(int j = 0; j < n; j++)
        	result[0][j]=1;
        for(int i = 1; i < m; i ++){
        	for(int j = 1; j < n; j ++){
        		result[i][j] = result[i-1][j]+result[i][j-1];
        	}
        }
        return result[m-1][n-1];
    }
}
////////
排列组合方法
permutation and combination 

C(n-1)/(m+n-2) or C(m-1)/(m+n-2) 

public class Solution {
    public int uniquePaths(int m, int n) {
        if(m==0||n==0)
            return 1;
        int steps = m+n-2;
        int goRight = n-1;
        long result = 1;
        for(int i = 1; i <= goRight ; i ++){
            result = result * (steps-goRight+i)/i;
        }
        return (int)result;
    }
}
///////
public class Solution {
    public int uniquePaths(int m, int n) {
         if(m == 0 || n ==  0)
            return 1;
        int [] dp = new int[n];
        dp[0] = 1;
        for(int i = 0; i < m; i++ ){
            for(int j = 1; j< n ; j++)
                dp[j]+=dp[j-1];
        }
        return dp[n-1];
    }
}