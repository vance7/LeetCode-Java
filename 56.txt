/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> result = new LinkedList<>();
        if(intervals==null||intervals.size() ==0)
            return result;
        int [] start = new int[intervals.size()];
        int [] end = new int[intervals.size()];
        boolean index = false;
        for(int i = 0; i < intervals.size(); i++){
            start[i] = intervals.get(i).start;
            end[i] = intervals.get(i).end;
        }
        Arrays.sort(start);
        Arrays.sort(end);
        for(int i = 1; i < intervals.size(); i++){
            result.add(new Interval());
            if(start[i]>end[i-1]){
                result.get(result.size()-1).start = start[i-1];
                result.get(result.size()-1).end = end[i-1];
            }else{
                int k = i - 1;
                while(i<intervals.size()&&start[i]<=end[i-1])
                    i++;
                result.get(result.size()-1).start = start[k];
                result.get(result.size()-1).end = end[i-1];
                if(i == intervals.size())
                    index = true;
            }
        }
        if(index == false)
            result.add(new Interval(start[start.length-1],end[end.length-1]));
        return result;
    }
}