/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int pathSum(TreeNode root, int sum) {
        if(root == null)
            return 0;
        return findPath(root,sum)+pathSum(root.left,sum)+pathSum(root.right,sum);
    }
    public int findPath(TreeNode root, int sum){
        int res = 0;
        if(root == null)
            return res;
        if(sum == root.val)
            res++;
        res += findPath(root.left, sum - root.val);
        res += findPath(root.right, sum - root.val);
        return res;
    }
}
//////////////
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int pathSum(TreeNode root, int sum) {
        if(root == null)
            return 0;
        HashMap<Integer, Integer> hm = new HashMap<>();
        return countPaths(root,hm, sum, 0);
    }
    
    public int countPaths(TreeNode root, HashMap<Integer,Integer> hm, int targetSum, int runningSum){
        if(root == null)
            return 0;
        runningSum+=root.val;
        int sum = runningSum - targetSum;
        int totalPaths = hm.getOrDefault(sum,0);
        if(runningSum == targetSum)
            totalPaths++;
        hashTableIncrement(hm, runningSum, 1);
        totalPaths+=countPaths(root.left, hm, targetSum, runningSum);
        totalPaths+=countPaths(root.right,hm, targetSum, runningSum);
        hashTableIncrement(hm,runningSum, -1);
        return totalPaths;
    }
    
    public void hashTableIncrement(HashMap<Integer,Integer> hm, int runningSum, int increment){
        int value = hm.getOrDefault(runningSum,0)+increment;
        hm.put(runningSum,value);
    }
}