/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder("");
        buildString(root,sb);
        return sb.toString();
    }
    
    public void buildString(TreeNode root, StringBuilder sb){
        if(root == null){
            sb.append("X"+",");
            return;
        }
        sb.append(Integer.toString(root.val)+",");
        buildString(root.left,sb);
        buildString(root.right,sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        Queue<String> queue = new LinkedList<>();
        queue.addAll(Arrays.asList(data.toString().split(",")));
        return buildTree(queue);
    }
    public TreeNode buildTree(Queue<String> queue){
        String str = queue.remove();
        if(str.equals("X"))
            return null;
        TreeNode curr = new TreeNode(Integer.valueOf(str));
        curr.left = buildTree(queue);
        curr.right = buildTree(queue);
        return curr;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));